class Solution {
private:

void merge(vector<int>& arr, int s, int e, int mid){
    vector<int>ds;
    int left=s;
    int right=mid+1;
    while(left<=mid && right<=e){
        if(arr[left]<arr[right]){
            ds.push_back(arr[left]);
            left++;
        }
        else{
            ds.push_back(arr[right]);
            right++;
        }
    }
    while(left<=mid){
        ds.push_back(arr[left]);
        left++;
    }

    while(right<=e){
        ds.push_back(arr[right]);
        right++;
    }

    for(int i=s; i<=e; i++){
        arr[i]=ds[i-s];
    }
    
}

void f(vector<int>& arr, int s, int e){
    if(s >= e){
        return;
    }
    int mid=(s+e)/2;
    f(arr, s, mid);

    f(arr, mid+1, e);

    merge(arr, s, e, mid);
}

public:
    vector<int> sortArray(vector<int>& nums) {
        int n=nums.size();
        f(nums, 0, n-1);
        return nums;
    }
};
